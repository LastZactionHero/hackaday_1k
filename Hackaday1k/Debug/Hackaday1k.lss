
AVRASM ver. 2.2.6  C:\Users\Zach\Documents\Atmel Studio\7.0\Hackaday1k\Hackaday1k\main.asm Mon Jan 02 11:20:05 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m328pdef.inc'
C:\Users\Zach\Documents\Atmel Studio\7.0\Hackaday1k\Hackaday1k\main.asm(16): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\M328PDEF.INC'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m328pdef.inc'
C:\Users\Zach\Documents\Atmel Studio\7.0\Hackaday1k\Hackaday1k\main.asm(16): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\M328PDEF.INC'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Hackaday1k.asm
                                 ;
                                 ; Created: 12/18/2016 9:40:35 PM
                                 ; Author : Zach Dicklin
                                 ;
                                 ; Application contains a small pixel font, and the ability to display a messsage to an LCD display with word wrapping.
                                 ; Built for an Atmega328p, using a Nokia 5110 displaly (https://www.sparkfun.com/products/10168)
                                 ;
                                 ;
                                 ; SRAM
                                 ; $0100 - $02FF ; Display Buffer
                                 ; $0300 - $033F ; Current Pixel Buffer
                                 ; $0340 - $03A0 ; Message Buffer
                                 
                                 .include "M328PDEF.INC"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .equ PIN_DISPLAY_SCE = PD7
                                 .equ PIN_DISPLAY_RST = PD6
                                 .equ PIN_DISPLAY_DC  = PD5
                                 
                                 .equ LCD_COMMAND = 0
                                 .equ LCD_DATA = 1
                                 .equ LCD_CONTRAST = 50
                                 .equ LCD_WIDTH = 84
                                 .equ LCD_HEIGHT = 48
                                 
                                 .cseg
                                 
                                 .org $0200
                                 
                                 ; The small pixel font, containing values from ! (0x21) to z (0x7A). Some punctuation is omitted.
                                 ; See Small Font Designer for more info: http://smallfont.develop.vodka
                                 ; Each character inclues:
                                 ; 1 byte  - width of character (e.g. 6 pixels)
                                 ; n bytes - the pixel data, drawing across to the width (x), then down a row (y)
000200 7a01
000201 0201
000202 0201
000203 0201
000204 0201
000205 0201
000206 0201
000207 0201
000208 0201
000209 0201
00020a 0201
00020b 0201
00020c ff03
00020d ff0e
00020e 0201
00020f 0201
000210 0604
000211 9999
000212 0360
000213 9207
000214 0448
000215 9106
000216 f068
000217 0604
000218 1992
000219 0460
00021a 9909
00021b 10f1
00021c 0f04
00021d 198e
00021e 0460
00021f 8e06
000220 6099
000221 0f04
000222 4412
000223 0440
000224 9606
000225 6099
000226 0604
000227 7199
000228 0160
000229 0112
00022a 0102
00022b 0102
00022c 0102
00022d 0402
00022e 9106
00022f 2020
000230 0201
000231 0105
000232 af14
000233 20c6
000234 0705
000235 e8a3
000236 c0c7
000237 0305
000238 08a3
000239 c045
00023a 0705
00023b 18a3
00023c c0c7
00023d 0f04
00023e 888e
00023f 04f0
000240 8e0f
000241 8088
000242 0305
000243 09a3
000244 c0c5
000245 0405
000246 f863
000247 20c6
000248 7e01
000249 0403
00024a 7893
00024b 0405
00024c 4e65
00024d 204a
00024e 0804
00024f 8888
000250 07f0
000251 0701
000252 5a1d
000253 64b5
000254 0580
000255 7304
000256 c659
000257 0620
000258 e801
000259 8661
00025a 8017
00025b 0f04
00025c 889f
00025d 0680
00025e c801
00025f 8aa2
000260 8167
000261 0705
000262 1fa3
000263 2046
000264 0305
000265 83a2
000266 c045
000267 0705
000268 42c8
000269 8010
00026a 0405
00026b 1863
00026c c0c5
00026d 0405
00026e 1863
00026f 80a8
000270 0107
000271 ad26
000272 a85a
000273 ff91
000274 0405
000275 4254
000276 202a
000277 0405
000278 1763
000279 8010
00027a 0705
00027b 66c2
00027c e043
00027d 0201
00027e 0201
00027f 0201
000280 0201
000281 0201
000282 0201
000283 ff04
000284 7971
000285 0470
000286 8e08
000287 e099
000288 ff04
000289 8969
00028a 0460
00028b 1701
00028c 7099
00028d ff04
00028e f869
00028f 0370
000290 740d
000291 0490
000292 79ff
000293 9771
000294 0804
000295 998e
000296 0190
000297 025e
000298 5611
000299 0804
00029a ca9a
00029b 0190
00029c 067e
00029d 08ff
00029e 963e
00029f 4059
0002a0 ff03
0002a1 680d
0002a2 ff04
0002a3 9906
0002a4 0460
0002a5 e9ff
0002a6 889e
0002a7 ff04
0002a8 9707
0002a9 0311
0002aa 7902
0002ab 0220
0002ac 9c03
0002ad 0103
0002ae 9074
0002af ff04
0002b0 9909
0002b1 0560
0002b2 01ff
0002b3 a818
0002b4 0680
0002b5 ffff
0002b6 b521
0002b7 8024
0002b8 ff04
0002b9 6609
0002ba 0490
0002bb 09ff
0002bc 2696
0002bd ff04
0002be 48f2
0002bf 00f0                      .db 0x01, 0x7a, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x03, 0xff, 0x0e, 0xff, 0x01, 0x02, 0x01, 0x02, 0x04, 0x06, 0x99, 0x99, 0x60, 0x03, 0x07, 0x92, 0x48, 0x04,                                  0x06, 0x91, 0x68, 0xf0, 0x04, 0x06, 0x92, 0x19, 0x60, 0x04, 0x09, 0x99, 0xf1, 0x10, 0x04, 0x0f, 0x8e, 0x19, 0x60, 0x04, 0x06, 0x8e, 0x99, 0x60, 0x04, 0x0f, 0x12, 0x44, 0x40, 0x04, 0x06, 0x96, 0x99, 0x60, 0x04, 0x06, 0x99, 0x71, 0x60, 0x01, 0x12, 0x01, 0x                                 02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x04, 0x06, 0x91, 0x20, 0x20, 0x01, 0x02, 0x05, 0x01, 0x14, 0xaf, 0xc6, 0x20, 0x05, 0x07, 0xa3, 0xe8, 0xc7, 0xc0, 0x05, 0x03, 0xa3, 0x08, 0x45, 0xc0, 0x05, 0x07, 0xa3, 0x18, 0xc7, 0xc0, 0x04, 0x0f, 0x8e, 0x88, 0xf0,                                  0x04, 0x0f, 0x8e, 0x88, 0x80, 0x05, 0x03, 0xa3, 0x09, 0xc5, 0xc0, 0x05, 0x04, 0x63, 0xf8, 0xc6, 0x20, 0x01, 0x7e, 0x03, 0x04, 0x93, 0x78, 0x05, 0x04, 0x65, 0x4e, 0x4a, 0x20, 0x04, 0x08, 0x88, 0x88, 0xf0, 0x07, 0x01, 0x07, 0x1d, 0x5a, 0xb5, 0x64, 0x80, 0x                                 05, 0x04, 0x73, 0x59, 0xc6, 0x20, 0x06, 0x01, 0xe8, 0x61, 0x86, 0x17, 0x80, 0x04, 0x0f, 0x9f, 0x88, 0x80, 0x06, 0x01, 0xc8, 0xa2, 0x8a, 0x67, 0x81, 0x05, 0x07, 0xa3, 0x1f, 0x46, 0x20, 0x05, 0x03, 0xa2, 0x83, 0x45, 0xc0, 0x05, 0x07, 0xc8, 0x42, 0x10, 0x80,                                  0x05, 0x04, 0x63, 0x18, 0xc5, 0xc0, 0x05, 0x04, 0x63, 0x18, 0xa8, 0x80, 0x07, 0x01, 0x26, 0xad, 0x5a, 0xa8, 0x91, 0xff, 0x05, 0x04, 0x54, 0x42, 0x2a, 0x20, 0x05, 0x04, 0x63, 0x17, 0x10, 0x80, 0x05, 0x07, 0xc2, 0x66, 0x43, 0xe0, 0x01, 0x02, 0x01, 0x02, 0x                                 01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x04, 0xff, 0x71, 0x79, 0x70, 0x04, 0x08, 0x8e, 0x99, 0xe0, 0x04, 0xff, 0x69, 0x89, 0x60, 0x04, 0x01, 0x17, 0x99, 0x70, 0x04, 0xff, 0x69, 0xf8, 0x70, 0x03, 0x0d, 0x74, 0x90, 0x04, 0xff, 0x79, 0x71, 0x97, 0x04,000000 ee00                       0x08, 0x8e, 0x99, 0x90, 0x01, 0x5e, 0x02, 0x11, 0x56, 0x04, 0x08, 0x9a, 0xca, 0x90, 0x01, 0x7e, 0x06, 0xff, 0x08, 0x3e, 0x96, 0x59, 0x40, 0x03, 0xff, 0x0d, 0x68, 0x04, 0xff, 0x06, 0x99, 0x60, 0x04, 0xff, 0xe9, 0x9e, 0x88, 0x04, 0xff, 0x07, 0x97, 0x11, 0x000001 b90a                      03, 0x02, 0x79, 0x20, 0x02, 0x03, 0x9c, 0x03, 0x01, 0x74, 0x90, 0x04, 0xff, 0x09, 0x99, 0x60, 0x05, 0xff, 0x01, 0x18, 0xa8, 0x80, 0x06, 0xff, 0xff, 0x21, 0xb5, 0x24, 0x80, 0x04, 0xff, 0x09, 0x66, 0x90, 0x04, 0xff, 0x09, 0x96, 0x26, 0x04, 0xff, 0xf2, 0x48,                                  0xf0, 0x00
000002 e20e                      
000003 b904                      .org $0000
                                 
000004 e500                      start:
000005 bd0c                      	; Control Pins
                                 	; DDRD
                                 	ldi r16, (1 << PIN_DISPLAY_SCE) | (1 << PIN_DISPLAY_RST) | (1 << PIN_DISPLAY_DC);	
                                 	out DDRD, r16
000006 e000                      	; DDRB
000007 9300 00c5                 	ldi r16, (1 << PB3) | (1 << PB5) | (1 << PB2) | (1 << PB1);
000009 e303                      	out DDRB, r16
00000a 9300 00c4                 	; SPI Control Register
                                 	ldi	R16, (1 << MSTR) | (1 << SPE)
00000c e108                      	out	SPCR, r16
00000d 9300 00c1                 
                                 	; UART
00000f e00e                      	; UBRRN = (fosc / 16 * baud) - 1 = 51; hex 33
000010 9300 00c2                 	ldi r16, 0x00
                                 	sts UBRR0H, r16
000012 9829                      	ldi r16, 0x33
                                 	sts UBRR0L, r16
                                 	; Enable receiver and transmitter
000013 985e                      	ldi r16, (1<<RXEN0)|(1<<TXEN0)
000014 9a5e                      	sts UCSR0B,r16
                                 	; Set frame format: 8data, 2stop bit
                                 	ldi r16, (1<<USBS0)|(3<<UCSZ00)
                                 	sts UCSR0C, r16
000015 e000                      
000016 e211                      	cbi PORTB, PB1; backlight test - remove me
000017 d0ea                      
                                 	; Reset the LCD to a known state
                                 	cbi PORTD, PIN_DISPLAY_RST
000018 e114                      	sbi PORTD, PIN_DISPLAY_RST
000019 d0e8                      
                                 	; LCD Setup
                                 	; Tell LCD extended commands follow
00001a e210                      	ldi r16, LCD_COMMAND
00001b d0e6                      	ldi r17, 0x21
                                 	rcall lcdwrite
                                 
00001c e01c                      	; LCD bias mode 1:48 (try 0x13)
00001d d0e4                      	ldi r17, 0x14
                                 	rcall lcdwrite
                                 
00001e e211                      	; We must send 0x20 before modifying the display control mode
00001f d0e2                      	ldi r17, 0x20
                                 	rcall lcdwrite
                                 
000020 eb12                      	; Set display control, normal mode.
000021 d0e0                      	ldi r17, 0x0C
                                 	rcall lcdwrite
                                 
000022 e210                      	; Tell LCD that extended commands follow
000023 d0de                      	ldi r17, 0x21
                                 	rcall lcdwrite
000024 d0b3                      
000025 d0d2                      	; Set LCD Vop (Contrast): Try 0xB1(good @ 3.3V) or 0xBF if your display is too dark
                                 	ldi r17, 0x80 | LCD_CONTRAST
                                 	rcall lcdwrite
                                 
000026 e010                      	; Set display mode
000027 9a29                      	ldi r17, 0x20
                                 	rcall lcdwrite
                                 
000028 9120 00c0                 	rcall display_buffer_clear
00002a ff27                      	rcall lcdwrite_display_buffer
00002b cffc                      	
                                 	; Receive message from UART and display to LCD
                                 	; Reset message on newline character
00002c 9100 00c6                 	ldi r17, 0x00 ; storage position in message buffer
00002e 300a                      	sbi PORTB, PB1 ; Turn on the backlight
00002f f431                      loop:
                                 	; Poll for new character
                                 	lds r18, UCSR0A
000030 d0a7                      	sbrs r18, RXC0
000031 d012                          rjmp loop
000032 d03a                      
000033 d0c4                      	; Read the character
                                 	lds r16, UDR0
                                 	cpi r16, 0x0A ; newline, write message and reset message buffer	
                                 	brne uart_loop_store_character
000034 e010                      
000035 cff2                      	; Prep the message and write to the display
                                 	rcall display_buffer_clear
                                 	rcall add_line_breaks
                                 	rcall text_write_string
000036 931f                      	rcall lcdwrite_display_buffer
000037 d003                      	
000038 911f                      
000039 9513                      	; Reset the message buffer
                                 	ldi r17, 0x00
00003a cfed                      	rjmp loop
                                 
                                 	; Store the character (not a newline)
                                 uart_loop_store_character:
                                 	push r17
                                 	rcall save_char_to_message_buffer
                                 	pop r17
00003b e0d3                      	inc r17 ; next position in message buffer
00003c e4c0                      
                                 	rjmp loop
00003d 1fc1                      
00003e f408                      ; Copy a byte to the message buffer
00003f 95c3                      ;
                                 ; r16 - character to write
000040 9309                      ; r17 - current position in buffer
000041 e000                      save_char_to_message_buffer:
000042 9309                      	ldi YH, 0x03 ; start of message buffer in SRAM
000043 9508                      	ldi YL, 0x40
                                 
                                 	adc YL, r17
                                 	brcc save_char_to_message_buffer_store_byte
                                 	inc YL
000044 e0f3                      save_char_to_message_buffer_store_byte:
000045 e4e0                      	st Y+, r16
                                 	ldi r16, 0x00
000046 e012                      	st Y+, r16
                                 	ret
                                 
000047 9101                      ; Preemptive word wrapping
000048 2f60                      ; Replace spaces with line breaks in places where words will carry over to the next line.
                                 add_line_breaks:
000049 3000                      	ldi ZH, 0x03 ; start of message buffer
00004a f109                      	ldi ZL, 0x40
                                 
                                 	ldi r17, 0x02 ; current x position - HACK: starting at 2, there's a small math error somewhere...
00004b 300a                      
00004c f411                      add_line_breaks_load_next_byte:
00004d e012                      	ld r16, Z+ ; load a byte of the message
00004e cff8                      	mov r22, r16
                                 	; Check if at end of buffer
                                 	cpi r16, 0x00
                                 	breq add_line_breaks_end
00004f 3200                      
000050 f429                      	; Check if this is a newline
                                 	cpi r16, 0x0A
000051 2fdf                      	brne add_line_breaks_check_if_space
000052 2fce                      	ldi r17, 0x02 ; reset X to 0 - HACK: starting at 2, there's a small math error somewhere...
                                 	rjmp add_line_breaks_load_next_byte
000053 e024                      
000054 0f12                      add_line_breaks_check_if_space:
                                 	; Check if this is a space
000055 cff1                      	cpi r16, 0x20 ; space?
                                 	brne add_line_breaks_get_length
                                 
                                 	mov YH, ZH ; Save the position of this space for later replacement
000056 936f                      	mov YL, ZL
000057 931f                      
000058 93ff                      	ldi r18, 0x04 ; add space width
000059 93ef                      	add r17, r18
00005a 93df                      
00005b 93cf                      	rjmp add_line_breaks_load_next_byte
00005c d056                      
00005d 91cf                      add_line_breaks_get_length:
00005e 91df                      	; Get the length of the character
00005f 91ef                      	push r22
000060 91ff                      	push r17
000061 911f                      	push ZH
000062 916f                      	push ZL
                                 	push YH
                                 	push YL
000063 0f10                      	rcall text_load_character
000064 9513                      	pop YL
                                 	pop YH
                                 	pop ZL
000065 e524                      	pop ZH
000066 1b21                      	pop r17
000067 f6fa                      	pop r22
                                 
000068 e02a                      	; Add this character to the x position
000069 932a                      	add r17, r16
00006a e012                      	inc r17 ; space between letters
00006b cfdb                      
                                 	; Compare the current width to the display
                                 	ldi r18, LCD_WIDTH
00006c 9508                      	sub r18, r17
                                 	brpl add_line_breaks_load_next_byte
                                 
                                 	ldi r18, 0x0A
00006d e020                      	st -Y, r18 ; Save a line break to the last space (todo: check if this position is valid)
00006e e010                      	ldi r17, 0x02 ; reset X to 0 - HACK: starting at 2, there's a small math error somewhere...
                                 	rjmp add_line_breaks_load_next_byte
00006f e0f3                      
000070 e4e0                      add_line_breaks_end:
                                 	ret
                                 
                                 ; Write string from the message buffer to the display buffer
000071 9101                      text_write_string:
000072 3000                      	ldi r18, 0x00 ; x position
000073 f0b9                      	ldi r17, 0x00 ; y position
                                 
000074 300a                      	ldi ZH, 0x03 ; starting message buffer in SRAM
000075 f421                      	ldi ZL, 0x40
000076 e038                      
000077 0f13                      text_write_string_load_next_character:
000078 e020                      	; Load the next character from the buffer
000079 c010                      	ld r16, Z+
                                 	cpi r16, 0x00
                                 	breq text_write_string_end ; buffer finished?
00007a 3200                      
00007b f419                      	cpi r16, 0x0A ; newline?
00007c e034                      	brne text_write_string_check_if_space_space
00007d 0f23                      	ldi r19, 0x08 ; move Y down one line
00007e c00b                      	add r17, r19
                                 	ldi r18, 0x00 ; move X to the start
                                 	rjmp text_write_string_check_newline
00007f 93ff                      
000080 93ef                      text_write_string_check_if_space_space:
000081 932f                      	cpi r16, 0x20 ; space?
000082 931f                      	brne text_write_string_write_character
000083 d008                      	ldi r19, 0x04
000084 911f                      	add r18, r19
000085 912f                      	rjmp text_write_string_check_newline
000086 91ef                      
000087 91ff                      text_write_string_write_character:
000088 0f20                      	push ZH
000089 9523                      	push ZL
                                 	push r18
                                 	push r17
00008a cfe6                      	rcall text_write_character
                                 	pop r17
                                 	pop r18
00008b 9508                      	pop ZL
                                 	pop ZH
                                 	add r18, r16 ; increment x position
                                 	inc r18
                                 
                                 text_write_string_check_newline:
                                 	rjmp text_write_string_load_next_character
                                 
                                 text_write_string_end:
                                 	ret
                                 
00008c 932f                      // Write an individual character to the display
00008d 931f                      // Inputs:
                                 // r16 - ASCII character to write
00008e d024                      // r17 - Starting Y Position
00008f 2f30                      // r18 - Starting X Position
                                 //
                                 // Outputs:
                                 // r16 - Character width
                                 text_write_character:
000090 910f                      	push r18 ; push starting X/Y positions onto the stack
000091 911f                      	push r17
000092 2f41                      
000093 2f60                      	rcall text_load_character
                                 	mov r19, r16 ; character width
000094 e0d3                      
000095 27cc                      	; Restore starting x/y positions from the stack
                                 	; pop r20 ; starting y position
                                 	;pop r21 ; starting x position
000096 9129                      	pop r16 ; y position
000097 3021                      	pop r17 ; x position
000098 f469                      	mov r20, r17 ; keep track of the starting X position
000099 936f                      	mov r22, r16 ; keep track of the starting Y position
00009a 934f                      
00009b 933f                      	ldi YH, 0x03  ; Buffer with uncompressed character pixel data
00009c 932f                      	clr YL
00009d 931f                      
00009e 930f                      text_write_character_next_pixel:
00009f d03e                      	ld r18, Y+
0000a0 910f                      	cpi r18, 0x01
0000a1 911f                      	brne text_write_character_increment
0000a2 912f                      	push r22
0000a3 913f                      	push r20
0000a4 914f                      	push r19
0000a5 916f                      	push r18
                                 	push r17
                                 	push r16	
0000a6 9513                      	rcall display_buffer_set_pixel
                                 	pop r16
0000a7 2f51                      	pop r17
0000a8 1b54                      	pop r18
0000a9 1753                      	pop r19
0000aa f759                      	pop r20
                                 	pop r22
0000ab 2f14                      
0000ac 9503                      text_write_character_increment:
                                 	inc r17		 ; increment X position
0000ad 2f50                      	; subtract from the starting position to determine how far in we are
0000ae 1b56                      	mov r21, r17 
0000af 3058                      	sub r21, r20
0000b0 f729                      	cp r21, r19	 ; compare this distance to the character width to see if we're at the end
                                 	brne text_write_character_next_pixel
0000b1 2f03                      	; At the end of the line
0000b2 9508                      	mov r17, r20  ; move X back to the beginning of the character
                                 	inc r16		  ; increment Y
                                 	; subtract from the starting Y position to determine how far down we are
                                 	mov r21, r16
                                 	sub r21, r22
                                 	cpi r21, 0x08 ; check if we're at the bottom of the character
                                 	brne text_write_character_next_pixel
                                 
                                 	mov r16, r19
                                 	ret
                                 
                                 ; Load a character, unpack it, and save on/off bits into the character pixel buffer
0000b3 e0f4                      ; saves character bits to $0300
0000b4 e0e0                      ;
                                 ; Inputs:
                                 ; r16 - ASCII character to write
                                 ;
                                 ; Outputs:
                                 ; returns character width on r16
0000b5 9115                      text_load_character:
0000b6 5201                      	; load the width of the character
0000b7 3000                      	ldi ZH, 0x04
0000b8 f049                      	ldi ZL, 0x00
                                 
0000b9 0fe1                      	; Seek to the start of the character
                                 	; Loop to the position of the ASCII character
0000ba 9115                      	; Subtract from the starting character
0000bb 950a                      	; Then loop over program memory by adding the width (number of bytes) each time
0000bc 3000                      	lpm r17, Z+
0000bd f021                      	subi r16, 0x21 ; Starts at exclamation point, 0x21
                                 	cpi r16, 0x00  ; already here, use this character
0000be 1fe1                      	breq text_load_character_width
0000bf f7d0                      
0000c0 95f3                      	add ZL, r17
0000c1 cff8                      text_load_character_seek_next:
                                 	lpm r17, Z+
                                 	dec r16
0000c2 2f01                      	cpi r16, 0x00
0000c3 2f51                      	breq text_load_character_width
                                 
                                 	adc ZL, r17
0000c4 e0d3                      	brcc text_load_character_seek_next
0000c5 e0c0                      	inc ZH
                                 	rjmp text_load_character_seek_next
                                 
0000c6 e010                      text_load_character_width:
0000c7 9125                      	mov r16, r17 ; save the character width
                                 	mov r21, r17 ; save the character width for decrementing
0000c8 3f2f                      
                                 	; relative position in SRAM
0000c9 f409                      	ldi YH, 0x03
0000ca e020                      	ldi YL, 0x00
                                 
                                 text_load_character_next_byte:
0000cb 9513                      	ldi r17, 0x00 ; bit position in data byte
                                 	lpm r18, Z+   ; data byte
0000cc e040                      
                                 	cpi r18, 0xFF ; 0xFF symbolizes a null byte
0000cd 0f22                      				  ; Change it to 0x00
0000ce f408                      	brne text_load_character_next_bit
0000cf e041                      	ldi r18, 0x00
                                 
                                 text_load_character_next_bit:
0000d0 9349                      	inc r17
                                 
0000d1 3018                      	ldi r20, 0x00
0000d2 f7c1                      
                                 	lsl r18
0000d3 955a                      	brcc text_load_character_store
0000d4 3050                      	ldi r20, 0x01
0000d5 f009                      
0000d6 cfef                      text_load_character_store:
                                 	st Y+, r20
                                 
0000d7 9508                      	cpi r17, 0x08
                                 	brne text_load_character_next_bit
                                 
                                 	dec r21
                                 	cpi r21, 0x00
0000d8 e0f1                      	breq text_load_character_done
0000d9 e0e0                      	rjmp text_load_character_next_byte
                                 
0000da 9201                      text_load_character_done:
0000db 30f3                      	ret
0000dc f7e9                      
0000dd 9508                      
                                 ; Clear the display buffer
                                 display_buffer_clear:
                                 	ldi ZH, 0x01
                                 	ldi ZL, 0x00
                                 display_buffer_clear_store:
                                 	st Z+, r0 ; r0 is probably 0....
                                 	cpi ZH, 0x03 ; clear to 0x0300, instead of 0x02F8. Saves a few words...
                                 	brne display_buffer_clear_store
                                 	ret
                                 
0000de 2f30                      ; Set an individual pixel in the display buffer
0000df 9535                      ; r16 - Y
0000e0 9535                      ; r17 - X
0000e1 9535                      display_buffer_set_pixel:
                                 	; Algorithm:
                                 	; shift = y % 8;
0000e2 e544                      	; display_map[x + (y/8)*LCD_WIDTH] |= 1<<shift;
0000e3 9f34                      
0000e4 2df1                      	; divide Y by 8 (aka 3 right shifts)
0000e5 2de0                      	mov r19, r16
                                 	asr r19 
                                 	asr r19
0000e6 1fe1                      	asr r19	
0000e7 e041                      
0000e8 f408                      	; multiply Y by LCD_WIDTH
0000e9 0ff4                      	ldi r20, LCD_WIDTH
                                 	mul r19, r20
                                 	mov ZH, r1
                                 	mov ZL, r0
0000ea 0ff4                      
                                 	; Add X
                                 	adc ZL, r17	
                                 	ldi r20, 0x01
0000eb e037                      	brcc display_buffer_set_pixel_add_offset
0000ec 2303                      	add ZH, r20
                                 
                                 	; Add display buffer memory offset, $0100
                                 display_buffer_set_pixel_add_offset:
0000ed e031                      	add ZH, r20
0000ee 3000                      
0000ef f021                      	; Get the bit position within the display buffer byte
                                 	; Y % 8 (aka bitmask with 0000 0111)
0000f0 0f33                      	ldi r19, 0x07
0000f1 950a                      	and r16, r19
0000f2 3000                      
0000f3 f7e1                      	; Build a mask from the bit position
                                 	; Turn 2 into 0000 0100
                                 	ldi r19, 0x01
                                 	cpi r16, 0x00
                                 	breq display_buffer_set_pixel_apply_mask
                                 display_buffer_set_pixel_shift_mask:
0000f4 8140                      	lsl r19
0000f5 2b43                      	dec r16
0000f6 8340                      	cpi r16, 0x00
0000f7 9508                      	brne display_buffer_set_pixel_shift_mask
                                 
                                 	; Load existing value from memory
                                 	; Apply the bitmask
                                 	; Store back to memory
0000f8 e0f1                      display_buffer_set_pixel_apply_mask:	 
0000f9 e0e0                      	ld r20, Z
                                 	or r20, r19	
                                 	st Z, r20
                                 	ret
0000fa 9111                      
0000fb e001                      ; Write display buffer to the LCD
0000fc d005                      lcdwrite_display_buffer:
                                 	; Set memory position at start of display buffer, $0100
                                 	ldi ZH, 0x01
0000fd 30f2                      	ldi ZL, 0x00	
0000fe f7d9                      
0000ff 3fe8                      	; Loop through the buffer, sending each value to the LCD
000100 f7c9                      lcdwrite_display_buffer_byte:
000101 9508                      	ld r17, Z+
                                 	ldi r16, LCD_DATA
                                 	rcall lcdwrite
                                 
                                 	; Stop if we're at the end, 84x48 + 0x0100 => 0x02F8
000102 9a5d                      	cpi ZH, 0x02
                                 	brne lcdwrite_display_buffer_byte
000103 3001                      	cpi ZL, 0xF8
000104 f009                      	brne lcdwrite_display_buffer_byte
000105 985d                      	ret
                                 
                                 ; r16 - write_type (LCD_COMMAND or LCD_DATA)
                                 ; r17 - data
000106 985f                      lcdwrite: 
                                 	sbi PORTD, PIN_DISPLAY_DC ; Set D/C line high as a default (sending data) to save some space
                                 	; But check if that's really the right choice...
000107 bd1e                      	cpi r16, LCD_DATA
                                 	breq lcdwrite_send_data ; Yup, we're sending data? We're already good.
                                 	cbi PORTD, PIN_DISPLAY_DC ; Actually we're sending a command. Set the D/C line low
                                 
000108 b50d                      lcdwrite_send_data:
000109 ff07                      	; Set chip select low
00010a cffd                      	cbi PORTD, PIN_DISPLAY_SCE
                                 
                                 	; Send the data
00010b 9a5f                      	out		SPDR, r17
00010c 9508                      


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   5 z  :   9 r0 :   2 r1 :   1 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  53 r17:  46 r18:  24 r19:  19 r20:  16 
r21:   9 r22:   7 r23:   0 r24:   0 r25:   0 r26:   0 r27:   0 r28:   8 
r29:   6 r30:  15 r31:  16 
Registers used: 15 out of 35 (42.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   3 add   :   8 adiw  :   0 and   :   1 
andi  :   0 asr   :   3 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   4 brcs  :   0 break :   0 breq  :   7 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  14 brpl  :   1 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   4 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 cpc   :   0 
cpi   :  20 cpse  :   0 dec   :   3 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :   8 jmp   :   0 
ld    :   5 ldd   :   0 ldi   :  53 lds   :   2 lpm   :   3 lsl   :   2 
lsr   :   0 mov   :  15 movw  :   0 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   1 ori   :   0 out   :   4 pop   :  19 
push  :  19 rcall :  19 ret   :   9 reti  :   0 rjmp  :  12 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   4 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   2 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   6 std   :   0 sts   :   4 
sub   :   3 subi  :   1 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 35 out of 113 (31.0%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000580    538    384    922   32768   2.8%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
